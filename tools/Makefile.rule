#
#
#	项目编译规则文件，其他目录引用该文件的规则来编译。这种用法来自BlueLab。
#	一个把消息机制用得非常烂的蓝牙开发平台。
#
# 根目录项检测,如果不定义又该项,很可能误伤系统
ifeq ("$(root_dir)","")
	$(error "Do not set the project directory, you should run 'source toos/setev.sh' in the project root directory")
endif

ifeq ("$(V)","1")
	Q :=
else
	Q := @
endif

.PHONY: clean all
##########################################################################
#	目录定义
##########################################################################	
local_path  := $(shell pwd)
include_dir += $(root_dir)/include
o 			:= $(root_dir)/out
lib_dir 	+= $o/lib
bin_dir	    := $o/bin
out_dir		:= $(subst $(root_dir),$o,$(local_path))

define depfile 	
	-MD -MP -MF"$(@:%.o=%.d)" -MT"$@" 
endef

ifndef	module_name
module_name	:= $(notdir $(local_path))
endif

src_files	+= $(wildcard *.[cSs])

$(shell mkdir -p  $(lib_dir)/ $(out_dir)/ $(bin_dir)/)

define sub-dir
	$Q \
		files=`find ./ -mindepth 2 -maxdepth 2 -name 'Makefile'`;\
		for f in $$files;do\
			grep '^BUILD\s*:=\s*LIBRARY\s*$$' $$f > /dev/null;\
			if [ $$? -eq 0 ] ;then\
				dir=`dirname $$f`;\
				$(MAKE)  -s -C $$dir V=$V $$* || exit 1;\
				files=$${files//$$f/};\
			fi;\
		done;\
		for f in $$files;do \
			dir=`dirname $$f`;\
			$(MAKE) -s -C $$dir V=$V $$* || exit 1;\
		done;
endef

##########################################################################
# 	工具定义	
##########################################################################
AS	:= as
AR	:= ar
CC	:= gcc
CXX	:= g++
LD	:= ld

#########################################################################
#	选项
#########################################################################
a_flags  += --32
c_flags  += $(addprefix -I,$(include_dir)) -m32 -std=c11 -nostdinc -fno-stack-protector -fno-builtin -Wall -Werror

########################################################################
#	中间文件生成
########################################################################
objs    := $(addprefix $(out_dir)/,$(objs))
objs	+= $(addprefix $(out_dir)/,$(patsubst %.S,%.o,$(filter %.S,$(src_files))))
objs	+= $(addprefix $(out_dir)/,$(patsubst %.s,%.o,$(filter %.s,$(src_files))))
objs	+= $(addprefix $(out_dir)/,$(patsubst %.c,%.o,$(filter %.c,$(src_files))))

########################################################################

ifeq ($(BUILD),BINARY)
module 	 := $(addprefix $(out_dir)/,$(module_name))
libs     += $(addprefix $(lib_dir)/lib,$(addsuffix .a,$(STATIC_LIBARY)))
ld_flags += $(addprefix -L,$(lib_dir)) $(addprefix -l,$(STATIC_LIBARY)) -m elf_i386 -nostdlib
$(module) : $(libs)
$(module) : $(objs)
ifeq ($(subdir),true)
	$(call sub-dir,$$*)
endif
	$Q echo  "  [LD]	$@"
	$Q $(LD) $^ $(ld_flags) -Ttext $(ENTRY) -o $@
	$Q cp $@ $(bin_dir)/
endif

ifeq ($(BUILD),LIBRARY)
module := $(lib_dir)/lib$(module_name).a
$(module): $(objs)
ifeq ($(subdir),true)
	$(call sub-dir,$$*)
endif
	$Q echo  "  [AR]	$(module)"
	$Q $(AR) -ur $@ $? > /dev/null 2>&1
else
all:
ifeq ($(subdir),true)
	$(call sub-dir,$$*)
endif
endif

clean:
	$Q -rm -f -- *.doa
	$Q -rm -rf $(out_dir)/*
ifdef cleans
	$Q echo  "  [CL]	$(cleans)"
	$Q -rm -f $(cleans)
endif
########################################################################
#	编译规则
########################################################################
$(out_dir)/%.o: %.c
	$Q mkdir -p $(dir $@)
	$Q echo  "  [CC]	$@"
	$Q $(CC) -c $< $(c_flags) $(depfile) -o $@

# 调用了C预处理的汇编文件 
$(out_dir)/%.o: %.S	
	$Q mkdir -p $(dir $@)
	$Q echo  "  [CC]	$@"
	$Q $(CC) -c $< $(c_flags) $(depfile) -o $@

$(out_dir)/%.o: %.s
	$Q mkdir -p $(dir $@)
	$Q echo  "  [AS]	$@"
	$Q $(AS) $< -o $@ $(a_flags) -c

-include	$(objs:%.o=%.d)
