#
#
#	项目编译规则文件，其他目录引用该文件的规则来编译。这种用法来自BlueLab。
#	一个把消息机制用得非常烂的蓝牙开发平台。
#
# 根目录项检测,如果不定又该项,很可能误伤系统
ifeq ("$(ROOT_DIR)","")
	$(error "Do not set the project directory, you should run 'source toos/setev.sh' in the project root directory")
endif

ifeq ("$(V)","1")
	Q :=
else
	Q := @
endif

.PHONY: clean all
##########################################################################
#
#	目录定义
##########################################################################	
LOCAL_PATH  := $(shell pwd)
INCLUDE_DIR += $(ROOT_DIR)/include
LIB_DIR 	+= $(ROOT_DIR)/lib
OBJS_DIR	:= $(subst $(ROOT_DIR),$(ROOT_DIR)/objs,$(LOCAL_PATH))
BIN_DIR	    := $(ROOT_DIR)/bin

ifndef	MODULE_NAME
MODULE_NAME	:= $(notdir $(LOCAL_PATH))
endif

SRC_FILES	+= $(wildcard *.[cSs])

$(shell mkdir -p  $(LIB_DIR)/ $(OBJS_DIR)/ $(BIN_DIR)/)
#sub-dir = $Q for dir in `find ./ -type d -maxdepth 1`;do $(MAKE)  -s -C $$dir V=$V $$* || exit 1; done;

define sub-dir
	$Q \
		files=`find ./ -mindepth 2 -maxdepth 2 -name 'Makefile'`;\
		for f in $$files;do\
			cat $$f|egrep '^BUILD\s*:=\s*LIBRARY\s*$$' > /dev/null;\
			if [ $$? -eq 0 ] ;then\
				dir=`dirname $$f`;\
				$(MAKE)  -s -C $$dir V=$V $$* || exit 1;\
				files=$${files//$$f/};\
			fi;\
		done;\
		for f in $$files;do \
			dir=`dirname $$f`;\
			$(MAKE)  -s -C $$dir V=$V $$* || exit 1;\
		done;
endef

##########################################################################
# 	工具定义	
##########################################################################
AS	:= as
AR	:= ar
CC	:= gcc
CXX	:= g++
LD	:= ld

#########################################################################
#	选项
#########################################################################


ASFLAGS  += --32
CFLAGS   += $(addprefix -I,$(INCLUDE_DIR)) -m32 -std=c11 -nostdinc -fno-stack-protector -fno-builtin -Wall -Werror

########################################################################
#	中间文件生成
########################################################################
#OBJS	:= $(addprefix objs/$(LOCAL_PATH)/,$(sort $(patsubst %.S,%.o,$(patsubst %.s,%.o,$(patsubst %.c,%.o,$(SRC_FILES))))))
OBJS	+= $(addprefix $(OBJS_DIR)/,$(patsubst %.S,%.o,$(filter %.S,$(SRC_FILES))))
OBJS	+= $(addprefix $(OBJS_DIR)/,$(patsubst %.s,%.o,$(filter %.s,$(SRC_FILES))))
OBJS	+= $(addprefix $(OBJS_DIR)/,$(patsubst %.c,%.o,$(filter %.c,$(SRC_FILES))))
#$(warning  $(OBJS))
########################################################################

ifeq ($(BUILD),BINARY)
MODULE 	:= $(addprefix $(OBJS_DIR)/,$(MODULE_NAME))
LIBS    += $(addprefix $(LIB_DIR)/lib,$(addsuffix .a,$(STATIC_LIBARY)))
LDFLAGS += $(addprefix -L,$(LIB_DIR)) $(addprefix -l,$(STATIC_LIBARY)) -m elf_i386 -nostdlib
$(MODULE) : $(OBJS) $(LIBS)
ifeq ($(SUBDIR),true)
	$(call sub-dir,$$*)
endif
	$Q $(LD) $(OBJS) $(LDFLAGS) -Ttext $(ENTRY) -o $@
	$Q echo "  [$(BUILD)]	Install    bin/   <=== "`basename $@`
	$Q cp $@ $(BIN_DIR)/
endif

ifeq ($(BUILD),LIBRARY)
MODULE := $(LIB_DIR)/lib$(MODULE_NAME).a
$(MODULE): $(OBJS)
ifeq ($(SUBDIR),true)
	$(call sub-dir,$$*)
endif
	$Q echo "  [$(BUILD)]	Install    lib/   <=== "`basename $(MODULE)`
	$Q $(AR) -r $@ $? > /dev/null 2>&1
else
all:
ifeq ($(SUBDIR),true)
	$(call sub-dir,$$*)
endif
endif

clean:
	$Q -rm -f -- *.doa
	$Q -rm -rf $(OBJS_DIR)/*
ifdef CLEANS
	$Q echo "  [CLEAN]	Clean	$(CLEANS)"
	$Q -rm -f $(CLEANS)
endif
########################################################################
#	编译规则
########################################################################
$(OBJS_DIR)/%.o: %.c
	$Q if [ ! -d "$(dir $@)" ];then mkdir -p "$(dir $@)"; fi
	$Q echo  "  [$(BUILD)]	Compiler   $(notdir $(MODULE))   <=== $<"
	$Q $(CC) -c $< $(CFLAGS) -MD -MP -MF"$(@:%.o=%.d)" -MT"$@" -o $@

# 调用了C预处理的汇编文件 
$(OBJS_DIR)/%.o: %.S	
	$Q if [ ! -d "$(dir $@)" ];then mkdir -p "$(dir $@)"; fi
	$Q echo  "  [$(BUILD)]	Compiler   $(notdir $(MODULE))   <=== $<"
	$Q $(CC) -c $< $(CFLAGS) -MD -MP -MF"$(@:%.o=%.d)" -MT"$@" -o $@

$(OBJS_DIR)/%.o: %.s
	$Q if [ ! -d "$(dir $@)" ];then mkdir -p "$(dir $@)"; fi
	$Q echo  "  [$(BUILD)]	Compiler   $(notdir $(MODULE))   <=== $<"
	$Q $(AS) $< -o $@ $(ASFLAGS) -c


-include	$(OBJS:%.o=%.d)
